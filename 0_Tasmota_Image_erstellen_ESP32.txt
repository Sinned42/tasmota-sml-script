// Tasmota Image erstellen - #defines für ESP32 - 16.01.2025
//------------------------------------------------------------------------------------------------------------------------------------------------
// Diese Features/Treiber (defines) habe ich für meine ESP32 Tasmota Images/Firmware verwendet, die ich auf ottelo.jimdo.de zum Download anbiete.
// Diese Datei kann euch auch dabei helfen ein eigenes angepasstes Tasmota Image für euren ESP mit Gitpod (oder Visual Studio und co.) 
// zu erstellen, wenn ihr mit dem ESP ein Stromzähler auslesen wollt (SML) oder eine smarte Steckdose mit Energiemessfunktion 
// habt und ihr die schönen Liniendiagramme (Google Chart Script) für den Verbrauch haben wollt. Andernfalls verwendet einfach 
// die originalen Images. Die unten stehenden Zeilen je nach Bedarf in die tasmota\user_config_override.h kopieren. Ich verwende alles.
// Falls ihr die Imagegröße klein halten wollt oder unnötige Treiber entfernen möchtet, dann schaut in die andere Datei für den ESP8266.
//
// Zum Kompilieren unter Gitpod folgendes in die Console eingeben:
// platformio run -e tasmota32   (Generic ESP32)
// ESP32 Varianten (unbedingt den Hinweis weiter unten lesen):
// platformio run -e tasmota32s2
// platformio run -e tasmota32s3
// platformio run -e tasmota32c3
// platformio run -e tasmota32c6
// platformio run -e tasmota32solo1 (für ESP32-S1 Single Core z.B. WT32-ETH01 v1.1)
// Mehr Infos bzgl. ESP32 Versionen: https://tasmota.github.io/docs/ESP32/#esp32_1
// für weitere ESPs siehe: https://github.com/arendst/Tasmota/blob/development/platformio_override_sample.ini bei default_envs
//------------------------------------------------------------------------------------------------------------------------------------------------
// Features/Treiber (de)aktivieren: https://tasmota.github.io/docs/Compile-your-build/#enabling-a-feature-in-tasmota
// Hier ist eine Übersicht aller Features/Treiber: https://github.com/arendst/Tasmota/blob/development/tasmota/my_user_config.h
// Wenn beim Kompilieren das ESP Board mit angegeben wird (z.B. -e tasmota32c3), dann werden Features/Treiber für diese Konfiguration
// (siehe https://github.com/arendst/Tasmota/blob/development/platformio_tasmota_env32.ini z.B. [env:tasmota32c3])
// verwendet und die deaktivierten Features, die ihr in der user_config_override.h eingetragen habt, überschrieben und somit doch verwendet!
// Wenn Features/Treiber (de)aktivieren werden sollen, dann beim Kompilieren immer die Basis verwenden "platformio run -e tasmota32", nicht
// Board spezifisch! Siehe auch https://tasmota.github.io/docs/Compile-your-build/#customize-your-build
// "Do not try to add or remove features to a variant, only to tasmota or tasmota32"
//------------------------------------------------------------------------------------------------------------------------------------------------

//-- SML, Script und Google Chart Support
#ifndef USE_SCRIPT
#define USE_SCRIPT
#endif
#ifndef USE_SML_M
#define USE_SML_M
#endif
#ifdef USE_RULES
#undef USE_RULES
#endif
#ifndef USE_GOOGLE_CHARTS
#define USE_GOOGLE_CHARTS
#endif
#ifndef LARGE_ARRAYS
#define LARGE_ARRAYS
#endif
#ifndef USE_SCRIPT_WEB_DISPLAY
#define USE_SCRIPT_WEB_DISPLAY
#endif

//-- enables authentication, this is not needed by most energy meters. M,=so5
/*#ifndef USE_SML_AUTHKEY
#define USE_SML_AUTHKEY
#endif*/

//-- Verwende Home Assistant API
#ifndef USE_HOME_ASSISTANT
#define USE_HOME_ASSISTANT
#endif

//-- enables additional software serial channels for ESP32, (receive only), define pin with '-' sign to assign to software serial
#ifndef USE_ESP32_SW_SERIAL
#define USE_ESP32_SW_SERIAL
#endif

//-- ESP32 Skriptgröße (max Anzahl an Zeichen) https://tasmota.github.io/docs/Scripting-Language/#script-buffer-size
#ifndef USE_UFILESYS
#define USE_UFILESYS
#endif
#undef UFSYS_SIZE
#define UFSYS_SIZE 16384  //ESP32

//-- Optional: Serielle Schnittstelle (RX/TX RS232) im Script verwenden
/*#ifndef USE_SCRIPT_SERIAL
#define USE_SCRIPT_SERIAL
#endif*/

//-- Optional: ESP32 WT32_ETH01 (Ethernet LAN Modul)
/*#ifndef USE_WT32_ETH01
#define USE_WT32_ETH01
#endif*/

//-- Optional: TCP-Server Script Support
/*#ifndef USE_SCRIPT_TCP_SERVER
#define USE_SCRIPT_TCP_SERVER
#endif
#ifndef USE_SCRIPT_TASK
#define USE_SCRIPT_TASK
#endif*/

//-- Optional: Optionale SML Features deaktivieren
/*#define NO_USE_SML_SPECOPT
#define NO_USE_SML_SCRIPT_CMD
#define NO_SML_REPLACE_VARS
#define NO_USE_SML_DECRYPT
#define NO_USE_SML_TCP
#define NO_USE_SML_CANBUS*/

//-- Optional: Verwende globale Variablen im Script
/*#ifndef USE_SCRIPT_GLOBVARS
#define USE_SCRIPT_GLOBVARS
#endif*/

//-- Optional: Für mein SML Simulator Script (max String Länge = 128). Im Script >D 128
/*#ifdef SCRIPT_MAXSSIZE
#undef SCRIPT_MAXSSIZE
#endif
#define SCRIPT_MAXSSIZE 128*/

//----------------------------------------------------------------------------

// Die OTA URL ändern, damit man nicht aus Versehen ein Upgrade macht!
// Leider wird dieses define nur verwendet, wenn ihr Tasmota zum ersten Mal auf den ESP flasht, ansonsten wird immer die im Flash gespeicherte verwendet. Mit diesem Command in der Console könnt ihr die url aber nachträglich ändern: 
// otaurl !!NEVER UPGRADE VIA WEB SERVER!!
// Der Befehl ist in meinem neusten Google Charts Skript (11.2024) auch enthalten und wird nach jedem Start einmalig gesetzt!
#undef OTA_URL
#define OTA_URL "!!NEVER UPGRADE VIA WEB SERVER!!"
#define CODE_IMAGE_STR "ottelo.jimdo.de"
